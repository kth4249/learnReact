{"version":3,"sources":["logo.svg","1.Mycomponent.js","2.Counter.js","5.ValidationSample.js","6.ScrollBox.js","8.LifeCycleSample.js","9.ErrorBoundary.js","12.Counter(useReducer).js","15.useInput.js","13.Info(useReducer).js","App.js","reportWebVitals.js","index.js"],"names":["Mycomponent","this","props","name","favoriteNumber","children","Component","defaultProps","propTyps","PropTypes","string","number","isRequired","reducer","state","action","value","Info","initialForm","useReducer","dispatch","e","target","useInputs","nickname","onChange","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4OAAe,I,iDCwCTA,E,uKASQ,IAAD,EACoCC,KAAKC,MAAvCC,EADF,EACEA,KAAMC,EADR,EACQA,eAAgBC,EADxB,EACwBA,SAC7B,OACI,6FACkBF,EADlB,wBAC6B,uBAD7B,yBAEiBE,EAFjB,uBAGI,uBAHJ,4DAIiBD,EAJjB,8B,GAZcE,aAApBN,EAEKO,aAAe,CAClBJ,KAAO,6BAHTH,EAKKQ,SAAW,CACdL,KAAMM,IAAUC,OAChBN,eAAgBK,IAAUE,OAAOC,YAgBzCZ,EAAYO,aAAe,CACzBJ,KAAM,6BC7DcG,YDsFPN,I,aEpFgBM,YCFPA,YCAMA,YCAFA,YCa5B,I,eCbA,SAASO,EAAQC,EAAOC,GACpB,OAAO,2BACAD,GADP,kBAEKC,EAAOZ,KAAOY,EAAOC,QCK9B,IAoCeC,EApCF,WAAM,MDDJ,SAAmBC,GAAc,IAAD,EACjBC,qBAAWN,EAASK,GADH,mBACpCJ,EADoC,KAC7BM,EAD6B,KAK3C,MAAO,CAACN,EAHS,SAAAO,GACbD,EAASC,EAAEC,UCGSC,CAAU,CAClCpB,KAAM,GACNqB,SAAU,KAPK,mBAKVV,EALU,KAKHW,EALG,KAUTtB,EAAmBW,EAAnBX,KAAMqB,EAAaV,EAAbU,SAOd,OACE,gCACE,gCACE,uBAAOrB,KAAK,OAAOa,MAAOb,EAAMsB,SAAUA,IAC1C,uBAAOtB,KAAK,WAAWa,MAAOQ,EAAUC,SAAUA,OAEpD,gCACE,gCACE,8CADF,IACctB,KAEd,gCACE,oDACCqB,YC2EIE,EAxBH,WAoBV,OAAO,cAAC,EAAD,KCnGMC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.89324ff4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","// 교재 3-2 첫 컴포넌트 생성\r\nimport React, { Component } from 'react';\r\nimport PropTypes from \"prop-types\";\r\n\r\n// const Mycomponent = () => {\r\n    //     return <div>나의 새롭고 멋진 컴포넌트</div>;\r\n    // }\r\n    \r\n    // 모듈 내보내기(export)\r\n    // 이 코드는 다른 파일에서 이 파일을 import할 때, 위에서 선언한 Mycomponent 클래스를 불러오도록 설정함\r\n    \r\n// [props]\r\n// 3.3.1 JSX 내부에서 props 렌더링\r\n// const Mycomponent = (props) => {\r\n//   return <div>\r\n//       안녕하세요, 제 이름은 {props.name} 입니다. <br />\r\n\r\n//       {/* 3.3.4 태그 사이의 내용을 보여 주는 children */}\r\n//       children 값은 {props.children} 입니다.\r\n//       </div>;\r\n// };\r\n\r\n// 3.3.5 비구조화 할당 문법을 통해 props 내부 값 추출하기.\r\n// const Mycomponent = (props) => {\r\n//   const { name, children, favoriteNumber } = props;\r\n//   return (\r\n//     <div>\r\n//       안녕하세요 제 이름은 {name} 입니다. <br />\r\n//       children 값은 {children} 입니다.\r\n\r\n//       <br />\r\n//       제가 좋아하는 숫자는 {favoriteNumber} 입니다.\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n\r\n// 3.3.7 클래스형 컴포넌트에서 props 사용하기\r\n// 클래스형 컴포넌트에서 props를 사용할 때는 render 함수에서 this.props를 조회하면 됨.\r\n// defaultProps와 propTyps는 동일한 방법으로 설정\r\nclass Mycomponent extends Component {\r\n    // 클래스형 컴포넌트에서 defaultProps와 propTypes를 설정할 때 class 내부에서 지정하는 방법도 있음\r\n    static defaultProps = {\r\n        name : '기본 이름'\r\n    };\r\n    static propTyps = {\r\n        name: PropTypes.string,\r\n        favoriteNumber: PropTypes.number.isRequired\r\n    }\r\n    render() {\r\n        const {name, favoriteNumber, children} = this.props;\r\n        return (\r\n            <div>\r\n                안녕하세요, 제 이름은 {name} 입니다. <br />\r\n                children 값은 {children} 입니다.\r\n                <br />\r\n                제가 좋아하는 숫자는 {favoriteNumber} 입니다.\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// 3.3.3 props 기본값 설정: defaultProps\r\nMycomponent.defaultProps = {\r\n  name: \"기본 이름\",\r\n};\r\n\r\n// 3.3.6 propsTypes를 통한 props 검증\r\n// 컴포넌트의 필수 props를 지정하거나 props의 타입(type)을 지정할 때 사용\r\n\r\n// 코드 상단에 'import PropTyps from \"prop-types\";' 를 사용하여 불러와야 함.\r\n\r\nMycomponent.propTypes = {\r\n  name: PropTypes.string,\r\n\r\n  // 3.3.6.1 isRequired를 사용하여 필수 propTypes 설정\r\n  favoriteNumber: PropTypes.number.isRequired\r\n  // 3.3.6.2 PropTypes 종류 - 교재 참고\r\n};\r\n\r\n\r\n/** defaultProps와 propsTypes는 꼭 사용해아 하나요?\r\n * 컴포넌트의 필수 사항은 아니므로 꼭 사용할 필요는 없음. 그러나 다른 개발자와 협업한다면\r\n * 해당 컴포넌트에 어떤 props가 필요한지 쉽게 알 수 있어 개발 능률이 좋아질 수 있음.\r\n */\r\n\r\n\r\n// 이렇게 설정하면 name 값은 무조건 문자열(string)형태로 전달해야 된다는 것을 의미합니다.\r\n\r\nexport default Mycomponent;\r\n","// 3.4.1 클래스형 컴포넌트의 state\r\nimport React, { Component } from \"react\";\r\n\r\nclass Counter extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    //state의 초기 값 설정하기\r\n    this.state = {\r\n      number: 0,\r\n    \r\n      // 3.4.1.1 state 객체 안에 여러 값이 있을 때\r\n      fixedNumber: 0,\r\n    };\r\n  }\r\n\r\n  // 3.4.1.2 state를 contructor에서 꺼내기\r\n  // contructor 메서드를 선언하지 않고도 state 초깃값을 설정할 수 있음.\r\n  state = {\r\n      number: 0,\r\n      fixedNumber: 0\r\n  }\r\n\r\n  render() {\r\n    const { number, fixedNumber } = this.state; // state를 조회할 때는 this.state로 조회합니다.\r\n    return (\r\n      <div>\r\n        <h1>{number}</h1>\r\n        <h2>바뀌지 않는 값: {fixedNumber}</h2>\r\n        <button\r\n          // onClick을 통해 버튼이 클릭되었을 때 호출할 함수를 지정합니다.\r\n          onClick={() => {\r\n            // this.setState를 사용하여 state에 새로운 값을 넣을 수 있습니다.\r\n            this.setState({ number: number + 1 });\r\n            //3.4.1.3 this.setState에 객체 대신 함수 인자 전달하기\r\n            // this.setState({number: this.state.number + 1})\r\n            // - 이렇게 하여도 카운트가 2개씩올라가지 않음\r\n            // setState를 사용한다고해서 state값이 바로 바뀌지 않기 때문\r\n            // 따라서 아래와 같이 작성해야함\r\n            this.setState(prevState => ({ // prevState : 기존 상태, props : 현재 지니고 있는 props (여기선 생략)\r\n                number: prevState.number + 1\r\n            }),\r\n            // 3.4.1.4 this.setState가 끝난 후 특정 작업 실행하기\r\n            // setState의 두 번째 파라미터로 콜백(callback)함수를 넘겨서 작업을 처리할 수 있음\r\n            () => {\r\n                console.log(\"방금 setState가 호출되었습니다\");\r\n            })\r\n          }}\r\n        >\r\n          +1\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counter;\r\n","// 5.1.2 예제 컴포넌트 생성\r\n\r\nimport React, { Component } from 'react';\r\nimport './ValidationSample.css';\r\n\r\nclass ValidationSample extends Component {\r\n    state = {\r\n        password: '',\r\n        clicked: false,\r\n        validated: false\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            password: e.target.value\r\n        })\r\n    }\r\n\r\n    handleButtonClick = () => {\r\n        this.setState({\r\n            clicked: true,\r\n            validated: this.state.password === '0000'\r\n        })\r\n        this.input.focus();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input \r\n                    type=\"password\"\r\n                    value={this.state.password}\r\n                    onChange={this.handleChange}\r\n                    className={this.state.clicked ? (this.state.validated ? 'success' : 'failure') : ''}\r\n                    // 5.2.3.1 input에 ref달기\r\n                    ref={(ref) => this.input = ref}\r\n                />\r\n                <button onClick={this.handleButtonClick}>검증하기</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n/*\r\nstate를 사용하여 우리에게 필요한 기능을 구현했지만\r\n다음과 같은 기능은 state만으로 해결할 수 없음.\r\n- 특정 input에 포커스 주기\r\n- 스크롤 박스 조작하기\r\n- Canvas 요소에 그림 그리기 등\r\n이 때는 어쩔 수 없이 DOM에 직접적으로 접근해야 하는데, 이를 위해 ref를 사용함.\r\n*/\r\n\r\nexport default ValidationSample;","// 5.3 컴포넌트에 ref 달기\r\nimport React, { Component } from 'react';\r\n\r\nclass ScrollBox extends Component {\r\n    // 5.3.3 컴포넌트에 메소드 생성\r\n    // 스크롤바를 맨 아래쪽으로 내리는 메서드\r\n    // DOM 노드가 가진 다음 값들을 사용\r\n    // scrollTop : 세로 스크롤바 위치(0~350)\r\n    // scrollHeiht : 스크롤이 있는 박스 안의 div 높이(650)\r\n    // clientHeight: 스크롤이 있는 박스의 높이(300)\r\n    scrollToBottom = () => {\r\n        const { scrollHeight, clientHeight } = this.box;\r\n        this.box.scrollTop = scrollHeight - clientHeight;\r\n    }\r\n    render() {\r\n        const style = {\r\n            border: '1px solid black',\r\n            height: '300px',\r\n            width: '300px',\r\n            overflow: 'auto',\r\n            position: 'relactive'\r\n        };\r\n\r\n        const innerStyle = {\r\n            width: '100%',\r\n            height: '650px',\r\n            background: 'linear-gradient(white, black)'\r\n        }\r\n\r\n        return (\r\n            <div\r\n                style={style}\r\n                ref={(ref) => {this.box=ref}}>\r\n                <div style={innerStyle}></div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ScrollBox;","import React, { Component } from 'react';\r\n\r\n// 7.3 라이프사이클 메서드 사용하기\r\nclass LifeCycleSample extends Component {\r\n    state = {\r\n        number: 0,\r\n        color: null\r\n    }\r\n\r\n    myRef = null; // ref를 설정할 부분\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        console.log('constructor');\r\n    }\r\n\r\n    static getDerivedStateFromProps(nextProps, prevState) {\r\n        console.log('getDerivedStateFromProps', prevState);\r\n        if(nextProps.color !== prevState.color) {\r\n            return { color: nextProps.color };\r\n        }\r\n        return null;\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log('componentDidMount');\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        console.log('shouldComponentUpdate', nextProps, nextState);\r\n        // 숫자의 마지막 자리가 4면 리렌더링하지 않습니다.\r\n        return nextState.number % 10 !== 4;\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        console.log('componentWillUnmount');\r\n    }\r\n\r\n    handleClick = () => {\r\n        this.setState({\r\n            number: this.state.number + 1\r\n        })\r\n    }\r\n\r\n    getSnapshotBeforeUpdate(prevProps, prevState) {\r\n        console.log('getSnapshotBeforeUpdate');\r\n        if(prevProps.color !== this.props.color) {\r\n            return this.myRef.style.color;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if(snapshot) {\r\n            console.log('업데이트되기 직전 색상: ', snapshot);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        console.log('render');\r\n\r\n        const style = {\r\n            color: this.props.color\r\n        }\r\n        return(\r\n            <div>\r\n                {/* 7.3.3 에러 잡아내기 */}\r\n                {this.props.missing.value}\r\n                <h1 style={style} ref={ref => this.myRef=ref}>\r\n                    {this.state.number}\r\n                </h1>\r\n                <p>color: {this.state.color}</p>\r\n                <button onClick={this.handleClick}>더하기</button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default LifeCycleSample;","import React, { Component } from 'react';\r\n\r\n// 7.3.3 에러 잡아내기\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({\r\n            error: true\r\n        });\r\n        console.log({error, info});\r\n    }\r\n\r\n    render() {\r\n        if(this.state.error) return <div>에러가 발생했습니다.!</div>;\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { useReducer } from \"react\";\r\n\r\n// 8.3 useReducer\r\nfunction reducer(state, action) {\r\n  // actionm type에 따라 다른 작업 수행\r\n  switch (action.type) {\r\n    case \"INCREMENT\":\r\n      return { value: state.value + 1 };\r\n    case \"DECREMENT\":\r\n      return { value: state.value - 1 };\r\n    default:\r\n      // 아무것도 해당되지 않을 때 기존 상태 반환\r\n      return state;\r\n  }\r\n}\r\n\r\nconst Counter = () => {\r\n  const [state, dispatch] = useReducer(reducer, { value: 0 });\r\n  return (\r\n      <div>\r\n          <p>\r\n              현재 카운터 값은 <b>{state.value}</b>입니다.\r\n          </p>\r\n          <button onClick={() => dispatch({type:'INCREMENT'})}>+1</button>\r\n          <button onClick={() => dispatch({type:'DECREMENT'})}>-1</button>\r\n      </div>\r\n  )\r\n};\r\n\r\nexport default Counter;\r\n","import { useReducer } from 'react'\r\n\r\n// 8.7 커스텀 Hooks 만들기\r\nfunction reducer(state, action) {\r\n    return {\r\n        ...state,\r\n        [action.name]: action.value\r\n    };\r\n}\r\n\r\nexport default function useInputs(initialForm) {\r\n    const [state, dispatch] = useReducer(reducer, initialForm);\r\n    const onChange = e => {\r\n        dispatch(e.target);\r\n    }\r\n    return [state, onChange];\r\n}","import React, { useReducer } from \"react\";\r\nimport useInputs from \"./15.useInput\";\r\n\r\n// 8.3.2 인풋 상태 관리하기\r\n// function reducer(state, action) {\r\n//   return {\r\n//     ...state,\r\n//     [action.name]: action.value,\r\n//   };\r\n// }\r\n\r\nconst Info = () => {\r\n  // const [state, dispatch] = useReducer(reducer, {\r\n  //     name: '',\r\n  //     nickname: ''\r\n  // });\r\n  const [state, onChange] = useInputs({\r\n    name: \"\",\r\n    nickname: \"\",\r\n  });\r\n\r\n  const { name, nickname } = state;\r\n  // const onChange = e => {\r\n  //     dispatch(e.target);\r\n  // }\r\n\r\n  // 8.7 커스텀 Hooks 만들기\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <input name=\"name\" value={name} onChange={onChange} />\r\n        <input name=\"nickname\" value={nickname} onChange={onChange} />\r\n      </div>\r\n      <div>\r\n        <div>\r\n          <b>이름:</b> {name}\r\n        </div>\r\n        <div>\r\n          <b>닉네임:</b>\r\n          {nickname}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Info;\r\n","import logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport Mycomponent from \"./1.Mycomponent\";\r\nimport Counter from \"./2.Counter\";\r\nimport Say from \"./3.Say\";\r\nimport EventPractice from \"./4.EventPractice\";\r\nimport ValidationSample from \"./5.ValidationSample\";\r\nimport ScrollBox from \"./6.ScrollBox\";\r\nimport { Component, useState } from \"react\";\r\nimport IterationSample from \"./7.IterationSample\";\r\nimport LifeCycleSample from \"./8.LifeCycleSample\";\r\nimport ErrorBoundary from \"./9.ErrorBoundary\";\r\nimport Counter2 from \"./10.Counter(useState)\";\r\nimport Info from \"./11.Info\";\r\nimport Counter3 from './12.Counter(useReducer)';\r\nimport Info2 from \"./13.Info(useReducer)\";\r\nimport Average from \"./14.Average\";\r\n// 모듈 불러오기(import)\r\n\r\n// const App = () => {\r\n//   // 3.3.2 컴포넌트를 사용할 때 props 값 지정하기\r\n//   // return <Mycomponent name=\"Taehan\" />;\r\n\r\n//   // 3.3.3 props 기본값 설정: defaultProps\r\n//   // return <Mycomponent />;\r\n\r\n//   // 3.3.4 태그 사이의 내용을 보여 주는 children\r\n//   // return <Mycomponent name={3}>리액트</Mycomponent>\r\n//   // name을 숫자로 전달하여 개발자 도구 console에 에러메시지가 출력됨\r\n//   // index.js:1 Warning: Failed prop type:\r\n//   // Invalid prop `name` of type `number` supplied to `Mycomponent`, expected `string`.\r\n\r\n//   // return <Mycomponent name=\"React\" favoriteNumber={1}>리액트</Mycomponent>\r\n//   // return <Counter />\r\n\r\n//   // return <Say />\r\n\r\n//   // 4.2.1 컴포넌트 생성 및 불러오기\r\n//   // return <EventPractice />\r\n\r\n//   // 5.1.2 App 컴포넌트에서 예제 컴포넌트 렌더링\r\n//   // return <ValidationSample />\r\n\r\n// };\r\n\r\n// class App extends Component {\r\n//   render() {\r\n//     return (\r\n//         // 5.3.2.2 App 컴포넌트에서 스크롤 박스 컴포넌트 렌더링\r\n//       // <div>\r\n//       //   <ScrollBox ref={(ref) => (this.scrollBox = ref)} />\r\n//       //   <button onClick={() => this.scrollBox.scrollToBottom()}>\r\n//       //     맨 밑으로\r\n//       //   </button>\r\n//       // </div>\r\n\r\n//       // 6.2.2\r\n//       <IterationSample />\r\n//     );\r\n//   }\r\n// }\r\n\r\n// 7.3.2 App 컴포넌트에서 예제 컴포넌트 사용\r\n// function getRandomColor() {\r\n//   return '#' + Math.floor(Math.random() * 16777215).toString(16);\r\n// }\r\n\r\n// class App extends Component {\r\n//   state = {\r\n//     color: '#000000'\r\n//   }\r\n\r\n//   handleClick = () => {\r\n//     this.setState({\r\n//       color: getRandomColor()\r\n//     })\r\n//   }\r\n\r\n//   render() {\r\n//     return(\r\n//       <div>\r\n//         <button onClick={this.handleClick}>랜덤 색상</button>\r\n//         <ErrorBoundary>\r\n//           <LifeCycleSample color={this.state.color} />\r\n//         </ErrorBoundary>\r\n//       </div>\r\n//     )\r\n//   }\r\n// }\r\n\r\n\r\nconst App = () => {\r\n  // return <Counter2 />\r\n  // return <Info />\r\n\r\n  // 8.2.3 뒷정리하기\r\n  // const [visible, setVisible] = useState(false);\r\n  // return (\r\n  //   <div>\r\n  //     <button \r\n  //       onClick={() => {\r\n  //         setVisible(!visible);\r\n  //       }}>\r\n  //       {visible ? '숨기기' : '보이기'}\r\n  //     </button>\r\n  //     <hr />\r\n  //     {visible && <Info />}\r\n  //   </div>\r\n  // )\r\n\r\n  // return <Counter3 />\r\n  return <Info2 />\r\n  // return <Average />\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}